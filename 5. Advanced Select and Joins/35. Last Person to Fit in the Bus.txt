1204. Last Person to Fit in the Bus

Table: Queue

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| person_id   | int     |
| person_name | varchar |
| weight      | int     |
| turn        | int     |
+-------------+---------+
person_id column contains unique values.
This table has the information about all people waiting for a bus.
The person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.
turn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.
weight is the weight of the person in kilograms.
 

There is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.

Write a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.

Note that only one person can board the bus at any given turn.

The result format is in the following example.

 

Example 1:

Input: 
Queue table:
+-----------+-------------+--------+------+
| person_id | person_name | weight | turn |
+-----------+-------------+--------+------+
| 5         | Alice       | 250    | 1    |
| 4         | Bob         | 175    | 5    |
| 3         | Alex        | 350    | 2    |
| 6         | John Cena   | 400    | 3    |
| 1         | Winston     | 500    | 6    |
| 2         | Marie       | 200    | 4    |
+-----------+-------------+--------+------+
Output: 
+-------------+
| person_name |
+-------------+
| John Cena   |
+-------------+
Explanation: The folowing table is ordered by the turn for simplicity.
+------+----+-----------+--------+--------------+
| Turn | ID | Name      | Weight | Total Weight |
+------+----+-----------+--------+--------------+
| 1    | 5  | Alice     | 250    | 250          |
| 2    | 3  | Alex      | 350    | 600          |
| 3    | 6  | John Cena | 400    | 1000         | (last person to board)
| 4    | 2  | Marie     | 200    | 1200         | (cannot board)
| 5    | 4  | Bob       | 175    | ___          |
| 6    | 1  | Winston   | 500    | ___          |
+------+----+-----------+--------+--------------+

# Write your MySQL query statement below
SELECT a.person_name
FROM Queue a
JOIN Queue b
ON a.turn >= b.turn
GROUP BY a.turn
HAVING SUM(b.weight) <= 1000
ORDER BY a.turn DESC
LIMIT 1

% Breaking down the MySQL query statement

Understanding the Logic:
1. Self-Join (Queue a JOIN Queue b ON a.turn >= b.turn):
- This joins each row (a) with all rows (b) that have a turn value less than or equal to a.turn. Effectively, for each a.turn, it considers all previous and current turns.

2. Aggregation (SUM(b.weight)):
- For each a.turn, it sums the weights of all b.weight values where b.turn is less than or equal to a.turn.

3. Filter (HAVING SUM(b.weight) <= 1000):
- This keeps only those a.turn values where the cumulative sum of weights up to that turn does not exceed 1000.

4. Sorting (ORDER BY a.turn DESC):
- The results are sorted in descending order of turn.

5. Limiting (LIMIT 1):
- Only the person with the highest valid turn is returned.

Issues with the Query:
- The self-join creates O(n²) complexity, which is inefficient for large datasets.
- Aggregation with GROUP BY and SUM forces re-computation for every row, further degrading performance.

Optimized Solution Using Window Functions and CTEs
- Instead of using a self-join, we can use window functions to calculate the cumulative sum efficiently and CTEs to filter results.

WITH RunningTotal AS (
    SELECT 
        person_name,
        turn,
        SUM(weight) OVER (ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_weight
    FROM Queue
)
SELECT person_name
FROM RunningTotal
WHERE cumulative_weight <= 1000
ORDER BY turn DESC
LIMIT 1;

Optimization Details:
1. Common Table Expression (CTE) RunningTotal:
- Computes the cumulative sum (SUM(weight) OVER (ORDER BY turn)) for each row based on the turn order.

2. Filtering (WHERE cumulative_weight <= 1000):
- Filters the rows where the cumulative sum is within the limit.

3. Sorting and Limiting (ORDER BY turn DESC LIMIT 1):
- Selects the person with the highest turn value that satisfies the condition.

Why This is More Efficient:
- Window functions (SUM() OVER()) eliminate the need for self-joins and calculate cumulative sums efficiently in O(n) time.
- CTEs make the query more readable and modular, improving maintainability.
- Avoiding self-joins reduces the computational complexity from O(n²) to O(n).















